-- How to Run --
make
./solver_stochastic <file> <completeness>

<file> is the file for the initial stacks

<completeness> higher numbers make the program look at generally longer solutions
	(based on my understanding of statistics, i think the completeness works like a logarthmic curve,
		where you need exponentially larger <completeness> to look at 
		linearlly larger solution lengths)

	0 ... will let the program choose the value

-- My Algorithm--

My random start, is the process of creating a random solution with a random length.
My step, is to swap two values of either even or odd in the solution.

steps 1 - 6 randomly go to a "coordinate"

1) get the result of (rand() % completeness + stack_count)
	if it's equal to 0 then return the solution, goto step 6

2) pick from a random stack that is too large
	append the index of the stack to the solution

3) get the result of (rand() % completeness + stack_count)
	if it's equal to 0 then return the solution, goto step 6

4) drop onto a random stack that is too small
	append the index of the stack to the solution

5) if there are any remaining stacks that are too large, goto step 1

steps 6 - 7 "wiggle" around the "coordinate"

6) either swap an odd index of the solution with another odd index of the solution
	or swap an even index with an even index

7) goto step 6, 100 times

8) goto step 1, 1000 times
